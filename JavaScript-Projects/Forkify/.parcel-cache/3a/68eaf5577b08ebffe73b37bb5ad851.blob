"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _icons = _interopRequireDefault(require("url:../../img/icons.svg"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class View {
  constructor() {
    _defineProperty(this, "_data", void 0);
  }

  //Method to render recipe
  render(recipeData) {
    //Return if the recipeData is empty
    if (!recipeData || Array.isArray(recipeData) && recipeData.length === 0) {
      console.log("Error  ");
      return this.renderError();
    }

    this._data = recipeData;

    const markup = this._generateMarkup();

    this._clear();

    this._parentElement.insertAdjacentHTML("afterbegin", markup);
  }

  update(data) {
    //Return if the recipeData is empty
    if (!recipeData || Array.isArray(recipeData) && recipeData.length === 0) {
      console.log("Error  ");
      return this.renderError();
    }

    this._data = data;

    const newMarkup = this._generateMarkup();

    const newDOM = document.createRange().createContextualFragment(newMarkup);
    const newElemets = Array.from(newDOM.querySelectorAll("*"));
    const curElements = Array.from(this._parentElement.querySelectorAll("*"));

    for (let i = 0; i < newElemets.length; i++) {
      const curEl = curElements[i];
      const newEl = newElements[i];

      if (newEl.isEqualNode(curEl) && newEl.firstChild?.nodeValue.trim() !== "") {}
    }
  } //Method to clear the parent element


  _clear() {
    this._parentElement.innerHTML = "";
  } //Method to render the spinner


  renderSpinner() {
    const markup = `
              <div class="spinner">
                <svg>
                  <use href="${_icons.default}#icon-loader"></use>
                </svg>
              </div>
        `;
    this._parentElement.innerHTMl = "";

    this._parentElement.insertAdjacentHTML("afterbegin", markup);
  } //Method to render errors on the UI


  renderError(message = this._errorMessage) {
    const markup = `
          <div class="error">
            <div>
              <svg>
                <use href="${_icons.default}#icon-alert-triangle"></use>
              </svg>
            </div>
            <p>${message}</p>
          </div>
    `;

    this._clear();

    this._parentElement.insertAdjacentHTML("afterbegin", markup);
  } //Method to render a message on the UI


  renderMessage(message = this._defaultMessage) {
    const markup = `
        <div class="message">
          <div>
            <svg>
              <use href="${_icons.default}#icon-smile"></use>
           </svg>
         </div>
            <p>${message}</p>
        </div>
    `;

    this._clear();

    this._parentElement.insertAdjacentHTML("afterbegin", markup);
  }

}

exports.default = View;